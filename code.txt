 <Form.Group className="mb-3">
                <Form.Label>Nombre</Form.Label>
              <Form.Control 
                  type="text" 
                  name='name'
                  placeholder="Nombre del empleado" 
                  value={employee.name}
                  onChange={handleChange}
                  isInvalid={!!errors.name}
              />
              <Form.Control.Feedback type='invalid'>
                  {errors.name}
              </Form.Control.Feedback>
            </Form.Group>
            <Form.Group className="mb-3">
                <Form.Label>Correo</Form.Label>
              <Form.Control 
                  type="text" 
                  name='email'
                  placeholder="Correo electronico" 
                  value={employee.email}
                  onChange={handleChange}
                  isInvalid={!!errors.email}
              />
              <Form.Control.Feedback type='invalid'>
                  {errors.email}
              </Form.Control.Feedback>
            </Form.Group>
            <Form.Group className="mb-3">
                <Form.Label>Telefono</Form.Label>
              <Form.Control 
                  type="text" 
                  name='phone'
                  placeholder="Telefono del empleado" 
                  value={employee.phone}
                  onChange={handleChange}
                  isInvalid={!!errors.phone}
              />
              <Form.Control.Feedback type='invalid'>
                  {errors.phone}
              </Form.Control.Feedback>
            </Form.Group>
            <Form.Group className="mb-3">
                <Form.Label>Cargo</Form.Label>
              <Form.Control 
                  type="number" 
                  name='role'
                  placeholder="Cargo del empleado" 
                  value={employee.role}
                  onChange={handleChange}
                  isInvalid={!!errors.role}
              />
              <Form.Control.Feedback type='invalid'>
                  {errors.role}
              </Form.Control.Feedback>
            </Form.Group>


            <EmployeeForm
                            employee = {selectedEmployee}
                            setEmployee = {setSelectedEmployee}
                            errors = {errors}
                            handleSave ={handleSave}
                        />


                          <Form>    
           
           <Button variant="info" onClick={handleSave}>
             Guardar
           </Button>
       </Form>

  class PurchaseInvoice(models.Model):
    order = models.ForeignKey(OrderSupplier, on_delete=models.CASCADE, null=True)
    invoice_date = models.DateTimeField(auto_now_add=True)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, editable=False)

    def save(self, *args, **kwargs):
        # Calcular el total_amount sumando todos los PurchaseItem relacionados con el mismo order_supplier
        if self.order:
            self.total_amount = sum(item.item_total for item in PurchaseItem.objects.filter(order_supplier=self.order))
        else:
            self.total_amount = 0  # O manejar el caso donde no hay order

        super().save(*args, **kwargs)
        
        # Aumentar el stock de los productos en la factura de compra
        self.adjust_stock_increase()

    def adjust_stock_increase(self):
        for item in self.order.purchaseitem_set.all():
            item.product.stock += item.quantity
            item.product.save()